diff --git a/node_modules/react-native-reanimated/Common/cpp/reanimated/Fabric/PropsRegistry.cpp b/node_modules/react-native-reanimated/Common/cpp/reanimated/Fabric/PropsRegistry.cpp
index d11f7fa..d472d87 100644
--- a/node_modules/react-native-reanimated/Common/cpp/reanimated/Fabric/PropsRegistry.cpp
+++ b/node_modules/react-native-reanimated/Common/cpp/reanimated/Fabric/PropsRegistry.cpp
@@ -41,22 +41,21 @@ void PropsRegistry::unmarkNodeAsRemovable(Tag viewTag) {
 }
 
 void PropsRegistry::handleNodeRemovals(const RootShadowNode &rootShadowNode) {
-  for (auto it = removableShadowNodes_.begin();
-       it != removableShadowNodes_.end();) {
-    const auto &shadowNode = it->second;
-    const auto &family = shadowNode->getFamily();
-    const auto &ancestors = family.getAncestors(rootShadowNode);
+  RemovableShadowNodes remainingShadowNodes;
 
-    // Skip if the node hasn't been removed
-    if (!ancestors.empty()) {
-      ++it;
+  for (const auto &[tag, shadowNode] : removableShadowNodes_) {
+    if (!shadowNode) {
       continue;
     }
 
-    const auto tag = shadowNode->getTag();
-    map_.erase(tag);
-    it = removableShadowNodes_.erase(it);
+    if (shadowNode->getFamily().getAncestors(rootShadowNode).empty()) {
+      map_.erase(tag);
+    } else {
+      remainingShadowNodes.emplace(tag, shadowNode);
+    }
   }
+
+  removableShadowNodes_ = std::move(remainingShadowNodes);
 }
 
 void PropsRegistry::remove(const Tag tag) {
diff --git a/node_modules/react-native-reanimated/Common/cpp/reanimated/Fabric/PropsRegistry.h b/node_modules/react-native-reanimated/Common/cpp/reanimated/Fabric/PropsRegistry.h
index 42a29b2..7523a2b 100644
--- a/node_modules/react-native-reanimated/Common/cpp/reanimated/Fabric/PropsRegistry.h
+++ b/node_modules/react-native-reanimated/Common/cpp/reanimated/Fabric/PropsRegistry.h
@@ -54,8 +54,11 @@ class PropsRegistry {
   void handleNodeRemovals(const RootShadowNode &rootShadowNode);
 
  private:
+  using RemovableShadowNodes =
+      std::unordered_map<Tag, std::shared_ptr<const ShadowNode>>;
+
   std::unordered_map<Tag, std::pair<ShadowNode::Shared, folly::dynamic>> map_;
-  std::unordered_map<Tag, ShadowNode::Shared> removableShadowNodes_;
+  RemovableShadowNodes removableShadowNodes_;
 
   mutable std::mutex mutex_; // Protects `map_`.
 
diff --git a/node_modules/react-native-reanimated/Common/cpp/reanimated/NativeModules/ReanimatedModuleProxy.cpp b/node_modules/react-native-reanimated/Common/cpp/reanimated/NativeModules/ReanimatedModuleProxy.cpp
index f3742ed..9a0e683 100644
--- a/node_modules/react-native-reanimated/Common/cpp/reanimated/NativeModules/ReanimatedModuleProxy.cpp
+++ b/node_modules/react-native-reanimated/Common/cpp/reanimated/NativeModules/ReanimatedModuleProxy.cpp
@@ -600,6 +600,7 @@ void ReanimatedModuleProxy::cleanupSensors() {
 void ReanimatedModuleProxy::markNodeAsRemovable(
     jsi::Runtime &rt,
     const jsi::Value &shadowNodeWrapper) {
+  auto lock = propsRegistry_->createLock();
   auto shadowNode = shadowNodeFromValue(rt, shadowNodeWrapper);
   propsRegistry_->markNodeAsRemovable(shadowNode);
 }
@@ -607,6 +608,7 @@ void ReanimatedModuleProxy::markNodeAsRemovable(
 void ReanimatedModuleProxy::unmarkNodeAsRemovable(
     jsi::Runtime &rt,
     const jsi::Value &viewTag) {
+  auto lock = propsRegistry_->createLock();
   propsRegistry_->unmarkNodeAsRemovable(viewTag.asNumber());
 }
 
